# <neronero & RudolfU - BK.ini>
label generate_ini(): 

    if not persistent.girl:

        call select_girl_pack() from _call_select_girl_pack_ini

        if result == "quit":
            return

        $ girl = result
        $ persistent.girl = girl.path

    else:
        python:

            for girl in girl_list:
                if girl.path == persistent.girl:
                    break
            else:
                renpy.say("", "Girl path 'persistent.girl' could not be found.")
                persistent.girl = None
                renpy.jump("generate_ini")

    menu:
        "This will generate a file named {b}_BK.ini{/b} in the selected girl's folder. WARNING: If such a file already exists, it will be overwritten!"
        "Continue":
            $ ini_header = "#### " + persistent.girl[len("images/"):] + " - BK.ini for BK v0.3 generated by Tagging Tool #### \n\n" 
            $ ini_header += "## This optional file contains advanced config data about a particular girl. Variables you don't need can be deleted. \n"
            $ ini_header += "## The file should be named '_BK.ini' and dropped inside the relevant girl folder. \n"
            $ ini_header += "## Full line comments are introduced with a double hash (##) \n"
            $ ini_header += "## Same line comments are added using a hash (#) or a semi-colon sign (;) \n"
            $ ini_header += "## Note: Cloning Options are now part of each section, but legacy format with a dedicated [cloning options] section is still supported. \n\n\n"


            $ ini_identity = "[identity] \n \n"
            $ ini_identity += "## Girl Name ## \n \n"
          
            $ ini_identity += "first_name = \"" + str(renpy.input("What is the girl's first name?:", default=persistent.girl[len("images/"):])) + "\" # If absent or empty, first name will be randomized \n"
            $ ini_identity += "last_name = \"" + str(renpy.input("What is the girl's last name?:", default=persistent.girl[len("images/"):])) + "\" # If absent or empty, no last name will be used \n"
            $ ini_identity += "inverted_name = " + str(renpy.call_screen("yesno_prompt", "Should her first and last name be displayed in reverse order? (East Asian style)", Return(True), Return(False))) + " # If True, the full name will display the last name before the first name, e.g. \'Spears Britney\'. \n\n"
            
            $ ini_identity += "## Girl Pack Data ## \n \n"
            
            $ ini_identity += "creator = \"" + str(renpy.input("Please insert your name so we know who created this magnificent girlpack:", default="Anon")) + "\" \n"
            
            $ ini_identity += "version = \"" + str(renpy.input("Give this pack a version number:", default="v1.0")) + "\" # Version is displayed in the girl mix screen and should help players find out how up to date your girl pack is. You can use any format you prefer. \n"
            $ ini_identity += "description = \"" + str(renpy.input("Give this pack a custom description which will be visible in the girl mix screen:", default="Enjoy my girlpack!")) + "\" # Description will be displayed in the girl mix screen. \n\n"

            $ ini_identity += "## Cloning Options ## \n"
            $ ini_identity += "## These options define how 'clones' of the original girl behave at generation. \n"
            $ ini_identity += "## There can be only one original girl at once in the game, and any number of clones. \n\n"
            
            $ show_clone_options = True

            menu:
                "{b}Unique{/b} - Do you wish to restrict the creation of clones for this girl?"
                "Yes, only allow her to appear as an original":
                    $ ini_identity += "unique = True # If True, clones will not spawn, only the original girl. All the other cloning options will have no effect. \n"
                    $ ini_identity += "keep_first_name = True # If True, clones will keep the same first name\nkeep_last_name = False # If True, clones will keep the same last name\nkeep_inverted = False # If True, clones will keep the same options for inverted names\n\n\n"
                    
                    $ show_clone_options = False

                "\nNo, allow clones\n":
                    $ ini_identity += "unique = False ## If True, clones will not spawn, only the original girl. All the other cloning options will have no effect. \n"
                    
                    menu:
                        "{b}Clone's first name{/b} - How should her clones be named?"
                        "Keep her first name":
                            $ ini_identity += "keep_first_name = True # If True, clones will keep the same first name\n"
                        "Randomise her first name":
                            $ ini_identity += "keep_first_name = False # If True, clones will keep the same first name\n"
                            
                    menu:
                        "{b}Clone's last name{/b} - How should her clones be named?"
                        "Keep her last name":
                            $ ini_identity += "keep_last_name = True # If True, clones will keep the same last name\n"
                        "Randomise her last name":
                            $ ini_identity += "keep_last_name = False # If True, clones will keep the same last name\n"
                            
                    menu:
                        "{b}Clone's name inversion{/b} - Should clones follow the same option you selected for inverted names?"
                        "Yes":
                            $ ini_identity += "keep_inverted = True # If True, clones will keep the same options for inverted names\n\n"
                        "No":
                            $ ini_identity += "keep_inverted = False # If True, clones will keep the same options for inverted names\n\n"

            $ ini_skills = "[base skills] \n \n"
            
            $ ini_skills += "## Girl Skills ##\n"
            $ ini_skills += "## Rank starting skills from 1 to 5 (1 is terrible, 3 is average, 5 is superb. The game will add some variation.) \n"
            $ ini_skills += "## Leave it out or set the value to 0 for a randomized skill level \n"
            $ ini_skills += "## beauty: masseuse/sex, body: dancer/anal, charm: waitress/service, refinement: geisha/fetish, sensitivity: service/satisfaction, libido: sex/customers, constitution: anal/energy, obedience: fetish/compliance \n \n"
            
            "{i}Next we will determine the girl's starting skills. The game will add some slight variation.{/i}"
            
            $ ini_skills += "beauty = "

            menu:
                "{b}Beauty{/b} - How beautiful she looks. Affects work as a {b}masseuse{/b} and regular {b}sex{/b}."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "body = "

            menu:
                "{b}Body{/b} - How well-shaped and firm her body is. Affects work as a {b}dancer{/b} and {b}anal{/b} sex."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "charm = "

            menu:
                "{b}Charm{/b} - Her personality and presence. Affects work as a {b}waitress{/b} and sexual {b}service{/b}."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "refinement = "

            menu:
                "{b}Refinement{/b} - How intelligent and worldly she is. Affects work as a {b}geisha{/b} and {b}fetish{/b} sex acts."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "libido = "

            menu:
                "{b}Libido{/b} - How eager for sex she is. Affects {b}dancer{/b}, {b}sex{/b} and max {b}whoring{/b} customers."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "obedience = "

            menu:
                "{b}Obedience{/b} - How receptive she is to orders and servitude. Affects {b}geisha{/b}, {b}fetish{/b} sexual acts and chances of accepting {b}work{/b} or {b}training{/b}."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "constitution = "

            menu:
                "{b}Constitution{/b} - Her stamina. Affects {b}waitress{/b}, {b}anal{/b} sex, improves her maximum {b}energy{/b} and allows her to serve {b}more customers{/b}."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n"
            $ ini_skills += "sensitivity = "

            menu:
                "{b}Sensitivity{/b} - How sensitive she is to her body and her partners. Affects {b}masseuse{/b}, {b}service{/b} and improves customer {b}satisfaction{/b}."
                "Terrible":
                    $ ini_skills += "1"
                "Mediocre":
                    $ ini_skills += "2"
                "Average":
                    $ ini_skills += "3"
                "Good":
                    $ ini_skills += "4"
                "Superb":
                    $ ini_skills += "5"
                "\nRandomly generate this stat\n":
                    $ ini_skills += "0"
            
            $ ini_skills += "\n\n"

            $ ini_skills += "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's skills{/b} - Should clones keep the same base skill values? (Beauty, body, charm, etc...)"
                    "Yes":
                        $ ini_skills += "keep_skills = True # If True, clones will keep the same base skill repartition\n"
                    "No, allow for more variation":
                        $ ini_skills += "keep_skills = False # If True, clones will keep the same base skill repartition\n"

            else:
                $ ini_skills += "keep_skills = False # If True, clones will keep the same base skill repartition"
                 
            $ ini_skills += "\n\n\n"

            $ ini_positive_traits = "[base positive traits] \n \n"
            
            "{i}Girls normally start with 2 positive and 1 negative traits. You may determine that some traits should be more or less likely to appear on your girl.{/i}"
            
            $ ini_positive_traits += "## A girl may only have 2 positive traits in vanilla BK. Gold traits are included in positive traits. \n"
            $ ini_positive_traits += "## Trait names must be between quotes (""), spelled exactly as they are in-game. See BKtraits.rpy for the full list of trait names. \n \n"
            
            $ renpy.say(narrator, "Select gold & positive traits which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
            $ ini_positive_traits += "## the girl will ALWAYS have these traits (up to maximum nb of traits). Use with caution as it makes girl generation very predictable. \n"
            call screen positive_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_positive_traits += "always = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select gold & positive traits which the girl should have {b}more often{/b} compared to other girls.")
            $ ini_positive_traits += "## The girl will more often have these traits than standard girls. \n"
            call screen positive_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_positive_traits += "often = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select gold & positive traits which the girl should have {b}less often{/b} compared to other girls.")
            $ ini_positive_traits += "## The girl will less often have these traits than standard girls. \n"
            call screen positive_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_positive_traits += "rarely = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select gold & positive traits which the girl should {b}NEVER{/b} have.")
            $ ini_positive_traits += "## The girl will NEVER have these traits. \n"
            call screen positive_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_positive_traits += "never = [" + str(txt) + "] \n \n \n"

            $ ini_negative_traits = "[base negative traits] \n \n"
            
            $ renpy.say(narrator, "Select negative traits which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
            $ ini_negative_traits += "## the girl will ALWAYS have these traits (up to maximum nb of traits). Use with caution as it makes girl generation very predictable. \n"
            call screen negative_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_negative_traits += "always = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select negative traits which the girl should have {b}more often{/b} compared to other girls.")
            $ ini_negative_traits += "## The girl will more often have these traits than standard girls. \n"
            call screen negative_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_negative_traits += "often = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select negative traits which the girl should have {b}less often{/b} compared to other girls.")
            $ ini_negative_traits += "## The girl will less often have these traits than standard girls. \n"
            call screen negative_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_negative_traits += "rarely = [" + str(txt) + "] \n \n"
            
            $ renpy.say(narrator, "Select negative traits which the girl should {b}NEVER{/b} have.")
            $ ini_negative_traits += "## The girl will NEVER have these traits. \n"
            call screen negative_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_negative_traits += "never = [" + str(txt) + "] \n \n"

            hide screen ini_negative_traits_list

            $ ini_negative_traits += "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's traits{/b} - Should clones keep the same trait options and restrictions?"
                    "Yes":
                        $ ini_negative_traits += "keep_traits = True # If True, clones will keep the same base trait options\n"
                    "No, allow for more variation":
                        $ ini_negative_traits += "keep_traits = False # If True, clones will keep the same base trait options\n"
            else:
                $ ini_negative_traits += "keep_traits = True # If True, clones will keep the same base trait options\n"
                 
            $ ini_negative_traits += "\n\n"

            $ ini_personality = "[base personality] \n \n"

            show screen ini_personality_list()
            
            "{i}A girl's personality determines how she reacts to the player's actions, both in flavor dialogue and gameplay-wise.{/i}"
    
            $ ini_personality += "## Standard Personality Settings ##\n"
            $ ini_personality += "## There are 24 personality types in the game: pervert, rebel, cold, nerd, masochist, masochist2, meek, sweet, superficial, bimbo, holy, helper, creep, repressed, schemer, prude, princess, pet, easy, class president, tsundere, loyal, yandere, stubborn\n"
            $ ini_personality += "## A girl can have only one personality. See 'gpersonalities' in BKinit_variables.rpy for more information.\n\n"
            
            $ renpy.say(narrator, "Select a personality which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
            call screen personality_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_personality += "always = [" + str(txt) + "] # Use with care: it makes girl generation very predictable. \n"
            
            $ renpy.say(narrator, "Select personalities which the girl should have {b}more often{/b} compared to other girls.")
            call screen personality_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_personality += "often = [" + str(txt) + "]\n"
            
            $ renpy.say(narrator, "Select personalities which the girl should have {b}less often{/b} compared to other girls.")
            call screen personality_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_personality += "rarely = [" + str(txt) + "]\n"
            
            $ renpy.say(narrator, "Select personalities which the girl should {b}NEVER{/b} have.")
            call screen personality_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_personality += "never = [" + str(txt) + "]\n\n"
            
            hide screen ini_personality_list
            
            $ ini_personality += "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's personality{/b} - Should clones keep the same personality options and restrictions?"
                    "Yes":
                        $ ini_personality += "keep_personality = True # If True, clones will keep the same personality options\n"
                    "No, allow for more variation":
                        $ ini_personality += "keep_personality = False # If True, clones will keep the same personality options\n"
            else:
                $ ini_personality += "keep_personality = False # If True, clones will keep the same personality options\n"
                
            $ ini_personality += "\n\n"
            $ ini_custom_personality = "[custom personality] \n \n"
            
            $ ini_custom_personality += "## Custom Personality Settings ##\n"
            $ ini_custom_personality += "## You may include a custom personality for your girl. This will override the 'Base personality' settings.\n"
            $ ini_custom_personality += "## This requires the inclusion of an .rpy file in your girl pack with her dialogue lines \n\n"
            
            $ ini_custom_personality += "custom_personality = False" + " # set to True to use a custom personality. This will override the 'Base personality' settings.\n"
            $ ini_custom_personality += "personality_name = \"\"" + " # give a name to the personality (warning: using an existing personality name will override that personality)\n"
            $ ini_custom_personality += "description = \"\"" + " # this text will display in the magic notebook when a girl's personality is known\n"
            $ ini_custom_personality += "attributes = (\"\",\"\")" + " # list a pair of attributes the personality will always have (warning: having more than 2 will cause bugs).\n"
            $ ini_custom_personality += "dialogue_personality_weight = 3" + " # # how much weight personality-based lines will be given compared to attribute-based and generic dialogue\n"
            $ ini_custom_personality += "dialogue_attribute_weight = 1" + " # # how much weight attribute-based lines will be given compared to personality-based and generic dialogue\n"
            $ ini_custom_personality += "generic_dialogue = True" + " # Disabled, but included here for future-proofing. Bool, decides if this personality allows for generic dialogue or not. Custom dialogue should be provided for all relevant situations if set to False.\n"
            $ ini_custom_personality += "personality_dialogue_only = None" + " # A list of topics (with quotes, between [] brackets) for which only personality-based dialogue is allowed (e.g. [\"slave first visit\", \"slave train beg\"]). All topics can be found in BKdialogue.rpy\n\n"

            $ ini_custom_personality += "custom_dialogue_label = \"\"" + " # For more complex custom dialogue, a label can be specified. It will receive the 'girl' object and the dialogue 'topic' as arguments.\n\n"
            
            $ ini_custom_personality += "\n"
            $ ini_tastes = "[tastes] \n\n"
            
            "{i}We now move to the girl's tastes.{/i}"
            
            $ ini_tastes += "## Tastes are used in chatting dialogue, and for flavor only. You may include answers that are not in vanilla choices.\n"
            $ ini_tastes += "## Leave the line out or set it to 'None' (without quotes) to randomize.\n\n"
            
            menu:
                "{b}Tastes{/b} - A girl's preferred color/food/drink. Used in chatting dialogue for flavor. You may provide unique answers that are not in the vanilla tastes list."
                "Customize tastes":
                    $ ini_tastes += "favorite_color = \"" + str(renpy.input("Favorite color:", default="the rainbow")) + "\" \n"
                    $ ini_tastes += "favorite_food = \"" + str(renpy.input("Favorite food:", default="pizza")) + "\" \n"
                    $ ini_tastes += "favorite_drink = \"" + str(renpy.input("Favorite drink:", default="applejuice")) + "\" \n\n"
                    
                    $ ini_tastes += "disliked_color = \"" + str(renpy.input("Disliked color:", default="grey")) + "\" \n"
                    $ ini_tastes += "disliked_food = \"" + str(renpy.input("Disliked food:", default="crackers")) + "\" \n"
                    $ ini_tastes += "disliked_drink = \"" + str(renpy.input("Disliked drink:", default="water")) + "\" \n\n"

                "\nRandomly generate tastes\n":
                    $ ini_tastes += "favorite_color = None \n"
                    $ ini_tastes += "favorite_food = None \n"
                    $ ini_tastes += "favorite_drink = None \n\n"
                    
                    $ ini_tastes += "disliked_color = None \n"
                    $ ini_tastes += "disliked_food = None \n"
                    $ ini_tastes += "disliked_drink = None \n\n"

            menu:
                "{b}Hobbies{/b} - A girl's hobbies. Used in chatting dialogue for flavor. Every girl has exactly 2 hobbies. You may provide unique answers that are not in the vanilla hobbies list."
                "Customize hobbies":
                    $ ini_tastes += "hobbies = [\"" + str([renpy.input("Hobby #1:", default="jousting")]) + "\","
                    $ ini_tastes += "\"" + str([renpy.input("Hobby #2:", default="dancing")]) + "\"] # Hobbies must be a list of two items (with quotes, between [] brackets)\n\n"

                "\nRandomly generate hobbies\n":
                    $ ini_tastes += "hobbies = None # Hobbies must be a list of two items (with quotes, between [] brackets)\n\n"

            $ ini_tastes += "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's tastes{/b} - Should clones keep the same tastes/hobbies?"
                    "Yes":
                        $ ini_tastes += "keep_tastes = True # If True, clones will keep the same tastes and hobbies\n"
                    "No, allow for more variation":
                        $ ini_tastes += "keep_tastes = False # If True, clones will keep the same tastes and hobbies\n"
            else:
                $ ini_tastes += "keep_personality = False # If True, clones will keep the same tastes and hobbies\n"

            $ ini_tastes += "\n\n"
            $ ini_sexual_preferences = "[sexual preferences] \n \n"
            
            "{i}We will now move to the girl's sexual preferences. Firstly by going over her favorite sex act categories and fixations.{/i}"
            
            $ ini_sexual_preferences += "## Sex Acts ##\n"
            $ ini_sexual_preferences += "## You can choose positive or negative acts which will be generated more often for this girl. Possible choices are: \"naked\", \"service\", \"sex\", \"anal\", \"fetish\", \"bisexual\" and \"group\".\n\n"
            
            $ renpy.say(narrator, "Which {b}positive acts{/b} should be generated more often for this girl?")
            call screen act_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "favorite_acts = [" + str(txt) + "]\n"
            
            $ renpy.say(narrator, "Which {b}negative acts{/b} should be generated more often for this girl?")
            call screen act_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "disliked_acts = [" + str(txt) + "]\n\n"


            $ ini_sexual_preferences += "## You can choose positive or negative fixations which will be generated more often for this girl. Fixations names are found in 'fix_dict' in the 'BKinit_variables.rpy' file\n"
            $ renpy.say(narrator, "Select positive fixations which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "always_fixations = [" + str(txt) + "] # Always positive. Use with care: it makes girl generation very predictable. \n"

            $ renpy.say(narrator, "Select which fixations should {b}NEVER{/b} be {b}positive{/b} fixations for this girl.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "never_fixations = [" + str(txt) + "] # Never positive.\n\n"
            
            $ renpy.say(narrator, "Select which fixations should {b}more often{/b} be {b}positive{/b} (and less often negative) compared to other girls.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "favorite_fixations = [" + str(txt) + "] # More chance of generating as positive fixation, less as negative.\n"
            
            $ renpy.say(narrator, "Select which fixations should {b}more often{/b} be {b}negative{/b} (and less often positive) compared to other girls.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "disliked_fixations = [" + str(txt) + "] # More chance of generating as negative fixation, less as positive.\n"
            
            $ renpy.say(narrator, "Select negative fixations which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "always_negative_fixations = [" + str(txt) + "] # Always negative. Use with care: it makes girl generation very predictable.\n"
            
            $ renpy.say(narrator, "Select which fixations should {b}NEVER{/b} be {b}negative{/b} fixations for this girl.")
            call screen fixation_choice()
            python:
                txt = ""
                for name in _return:
                    txt += " \"%s\", " % name
                renpy.say(narrator, txt)
                ini_sexual_preferences += "never_negative_fixations = [" + str(txt) + "] # Never negative.\n\n"
            
            "{i}Next we will determine the girl's sexual experience and her farm weakness.{/i}"
            
            $ ini_sexual_preferences += "## Prior Sexual Experience ##\n"
            $ ini_sexual_preferences += "sexual_experience = "
            
            menu:
                "{b}Sexual experience{/b} - How much sexual experience has the girl had prior to meeting the player?"
                "Very experienced":
                    $ ini_sexual_preferences += "\"very experienced\""
                "Experienced":
                    $ ini_sexual_preferences += "\"experienced\""
                "Average":
                    $ ini_sexual_preferences += "\"average\""
                "Inexperienced":
                    $ ini_sexual_preferences += "\"inexperienced\""
                "Very inexperienced":
                    $ ini_sexual_preferences += "\"very inexperienced\""
                "\nRandomly generate this stat\n":
                    $ ini_sexual_preferences += "\"random\""
                    
            $ ini_sexual_preferences += " # How much sexual experience she has prior to meeting the player. You can choose between the following: \"very experienced\", \"experienced\",  \"average\", \"inexperienced\", \"very inexperienced\", \"random\". If left out or empty, a random level of experience will be chosen.\n\n"
            
            $ ini_sexual_preferences += "## Farm weakness ##\n"
            $ ini_sexual_preferences += "farm_weakness = "

            menu:
                "{b}Farm weakness{/b} - Choose a farm weakness for this girl."
                "Stallion":
                    $ ini_sexual_preferences += "\"stallion\""
                "Beast":
                    $ ini_sexual_preferences += "\"beast\""
                "Monster":
                    $ ini_sexual_preferences += "\"monster\""
                "Machine":
                    $ ini_sexual_preferences += "\"machine\""
                "\nRandomly generate this stat\n":
                    $ ini_sexual_preferences += "\"random\""
            
            $ ini_sexual_preferences += " # choose between the following values: \"stallion\", \"beast\", \"monster\", \"machine\", \"random\"\n\n"

            $ ini_sexual_preferences += "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's sexual preferences{/b} - Should clones keep the same options and restrictions regarding sexual experience and fixations?"
                    "Yes":
                        $ ini_sexual_preferences += "keep_sex = True # If True, clones will keep the same sexual preferences and experience\n\n"
                    "No, allow for more variation":
                        $ ini_sexual_preferences += "keep_sex = False # If True, clones will keep the same sexual preferences and experience\n\n"
            else:
                $ ini_sexual_preferences += "keep_sex = True # If True, clones will keep the same sexual preferences and experience\n\n"

            $ ini_sexual_preferences += "\n"
            $ ini_background = "[background story] \n\n"

            "{i}Nearly done! The last batch of questions are about her background and cloning options.{/i}"
            
            $ show_location_options = True
            $ ini_background += "## Girl Generation ##\n"
            $ ini_background += "generate_as = "
            
            menu:
                "{b}Freedom{/b} - Should the girl be restricted to being a free girl and/or a slave?"
                "Restrict her to only appear as a slave (in the slavemarket)":
                    $ ini_background += "\"slave\""
                    $ show_location_options = False
                "Restrict her to only appear as a free girl (in the city)":
                    $ ini_background += "\"free\""
                "Allow both":
                    $ ini_background += "\"all\""
                    
            $ ini_background += " # Can be set to \"all\" or restricted to \"free\", \"slave\", or \"story\". Story girls never generate on their own, only during custom events.\n"

            $ ini_background += "generate_in = "
            
            if show_location_options:
                menu:
                    "{b}Location{/b} - Would you like her to only appear in a specific district/location in the city?"
                    "Yes":
                        menu:
                            "{b}District{/b} - Pick the district in which she can be found"
                            "District 1: The Slums":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The Slums\""
                                    "Spice market":
                                        $ ini_background += "\"Spice market\""
                                    "Sewers":
                                        $ ini_background += "\"Sewers\""
                                    "Farm":
                                        $ ini_background += "\"Farm\""
                                    "Watchtower":
                                        $ ini_background += "\"Spice market\""
                                    "Junkyard":
                                        $ ini_background += "\"Junkyard\""
                                    "Thieves guild":
                                        $ ini_background += "\"Thieves guild\""
                            "District 2: The Docks":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The Docks\""
                                    "Harbor":
                                        $ ini_background += "\"Harbor\""
                                    "Shipyard":
                                        $ ini_background += "\"Shipyard\""
                                    "Taverns":
                                        $ ini_background += "\"Taverns\""
                                    "Seafront":
                                        $ ini_background += "\"Seafront\""
                                    "Beach":
                                        $ ini_background += "\"Beach\""
                                    "Exotic emporium":
                                        $ ini_background += "\"Exotic emporium\""
                            "District 3: The Warehouse":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The Warehouse\""
                                    "Stables":
                                        $ ini_background += "\"Stables\""
                                    "Plaza":
                                        $ ini_background += "\"Plaza\""
                                    "Market":
                                        $ ini_background += "\"Market\""
                                    "Gallows":
                                        $ ini_background += "\"Gallows\""
                                    "Prison":
                                        $ ini_background += "\"Prison\""
                                    "Arena":
                                        $ ini_background += "\"Arena\""
                            "District 4: The Magic Gardens":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The Magic Gardens\""
                                    "Botanical garden":
                                        $ ini_background += "\"Botanical garden\""
                                    "Hanging gardens":
                                        $ ini_background += "\"Hanging gardens\""
                                    "Library":
                                        $ ini_background += "\"Library\""
                                    "Guild quarter":
                                        $ ini_background += "\"Guild quarter\""
                                    "Magic guild":
                                        $ ini_background += "\"Magic guild\""
                                    "Magic forest":
                                        $ ini_background += "\"Magic forest\""
                            "District 5: The Cathedra":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The Cathedra\""
                                    "Pilgrim road":
                                        $ ini_background += "\"Pilgrim road\""
                                    "Banking quarter":
                                        $ ini_background += "\"Banking quarter\""
                                    "Old ruins":
                                        $ ini_background += "\"Old ruins\""
                                    "Lakefront":
                                        $ ini_background += "\"Lakefront\""
                                    "Training ground":
                                        $ ini_background += "\"Training ground\""
                                    "Cathedra":
                                        $ ini_background += "\"Cathedra\""
                            "District 6: The King's Hold":
                                menu:
                                    "Would you like to narrow it down to a single location in this district?"
                                    "\nAnywhere in this district\n":
                                        $ ini_background += "\"The King's Hold\""
                                    "Battlements":
                                        $ ini_background += "\"Battlements\""
                                    "Keep":
                                        $ ini_background += "\"Keep\""
                                    "Hall":
                                        $ ini_background += "\"Hall\""
                                    "Courtyard":
                                        $ ini_background += "\"Courtyard\""
                                    "Temple":
                                        $ ini_background += "\"Temple\""
                                    "Waterfalls":
                                        $ ini_background += "\"Waterfalls\""
                    "No, she can appear anywhere in the city":
                        $ ini_background += "\"all\""
            else:
                $ ini_background += "\"all\""
                    
            $ ini_background += "  # Can be set to \"all\" or a district or location name that must be spelled exactly as in game (including the 'The' article for districts). Handles where the girl will generate as a free girl. No effect on slave girls.\n"
            
            if show_location_options:
                menu:
                    "After the player has met her, will she start roaming to a different location each week?"
                    "Yes":
                        $ ini_background += "move_after_meeting = True"
                    "No, she should remain in one place.":
                        $ ini_background += "move_after_meeting = False"
            else:
                $ ini_background += "move_after_meeting = True"

            $ ini_background += " # Used with the generate_in option (default=True). If True, free girls will move from their starting location normally each week after they have their first interaction with the player. If False, they remain in place. \n\n"
            
            $ ini_background += "## Origin ##\n"
            $ ini_background += "## You can provide a custom origin (if you do, make sure to include the origin description below) or just \"random\"\n"
            $ ini_background += "## Origin description must be written in the girl's own words\n\n"
            
            menu:
                "{b}Origin{/b} - Would you like to write a line of dialogue that gives the girl a custom origin story?"
                "Yes":
                    $ ini_background += "origin = \"" + str(renpy.input("{b}Origin name{/b} - State the location where she was raised.", default="")) + "\"\n"
                    $ ini_background += "origin_description = \"" + str(renpy.input("{b}Origin description{/b} - Write down a line of dialogue for your girl, in which she talks about her place of origin.", default="")) + "\"\n\n"
                    
                "No, let the game generate an origin story for her":
                    $ ini_background += "origin = \"random\"\norigin_description = None\n\n"
                    
            $ ini_background += "## Basic Story ##\n"
            $ ini_background += "## Random slave story: write the story name(s) between quotes, as found in BKinit_variables.rpy (e.g. \"slave_story1\", \"slave_story2\"...)\n\n"
            
            show screen ini_story_list()

            menu:
                "{b}Story{/b} - As you get to know a slave, you uncover her story. Would you like to customize which stories are suitable for her?"
                "Yes": 
                    $ renpy.say(narrator, "Select a story which the girl should {b}ALWAYS{/b} have. We recommend leaving this blank as it makes girl generation very predictable.")
                    call screen story_choice()
                    python:
                        txt = ""
                        for name in _return:
                            txt += " \"%s\", " % name
                        renpy.say(narrator, txt)
                        ini_background += "always_slave_story = [" + str(txt) + "] # Use with care: it makes girl generation very predictable. \n"
                    
                    $ renpy.say(narrator, "Select stories which the girl should have {b}more often{/b} compared to other girls.")
                    call screen story_choice()
                    python:
                        txt = ""
                        for name in _return:
                            txt += " \"%s\", " % name
                        renpy.say(narrator, txt)
                        ini_personality += "often_slave_story = [" + str(txt) + "]\n"
                    
                    $ renpy.say(narrator, "Select stories which the girl should have {b}less often{/b} compared to other girls.")
                    call screen story_choice()
                    python:
                        txt = ""
                        for name in _return:
                            txt += " \"%s\", " % name
                        renpy.say(narrator, txt)
                        ini_personality += "rarely_slave_story = [" + str(txt) + "]\n"
                    
                    $ renpy.say(narrator, "Select stories which the girl should {b}NEVER{/b} have.")
                    call screen story_choice()
                    python:
                        txt = ""
                        for name in _return:
                            txt += " \"%s\", " % name
                        renpy.say(narrator, txt)
                        ini_personality += "never_slave_story = [" + str(txt) + "]\n\n"
                    
                "No, make it completely random":
                    $ ini_background += "always_slave_story = []\noften_slave_story = []\nrarely_slave_story = []\nnever_slave_story = []"

            hide screen ini_story_list
            
            $ ini_background += "## Custom Story ##\n"
            $ ini_background += "## If provided, this label will be called instead of a random back-story. It must take 'girl' as an argument. Replaces the random slave story above.\n"
            $ ini_background += "## See the 'slave_story' labels in BKinteractions.rpy for examples of how it might work (feel free to set up the events very differently)\n\n"
            $ ini_background += "story_label = None # provide the custom label name (between quotes)\n\n"
            
            $ ini_background += "## Custom City Event ##\n"
            $ ini_background += "## If provided, this label will be called instead of normal city interactions. It must take 'girl' as an argument.\n"
            $ ini_background += "## The regular dialog options can be called from within this custom label by using 'call free_girl_talk(girl)'\n\n"
            $ ini_background += "city_label = None # provide the custom label name (between quotes)\n\n"
            
            $ ini_background += "## Custom Night Event ##\n"
            $ ini_background += "## If provided, this label will be called every night. It must take the 'girl' argument. This could be useful to increment some values, run some tests or reset interactions.\n"
            $ ini_background += "## It is recommended that such labels run silent and add a StoryEvent if necessary.\n\n"
            $ ini_background += "night_label = None # provide the custom label name (between quotes)\n\n"
            
            $ ini_background += "## Custom Interaction ##\n"
            $ ini_background += "## This adds a custom button to the regular slave interact menu. Leave it out or set value to None or empty brackets if you are not using it.\n\n"
            $ ini_background += "interact_prompt = None # Example usage: (\"Visit her room\", \"my_interaction_label\", 1) The first string refers to the caption of the button. The second is the label which will be called upon clicking the button. The integer is the AP cost (for UI display only, it isn't deducted from MC actions outside of your label code for flexibility). It must take 'girl' as an argument.\n\n"

            $ ini_background += "## Custom Initialization Function ##\n"
            $ ini_background += "## If provided, this function will be called when a girl with this template is created, after randomization.\n"
            $ ini_background += "## Write the function in an init block in _events.rpy or another custom .rpy file.\n"
            $ ini_background += "## It must take 'girl' as an argument. It must not interrupt game flow (python only, no ren'py calls or jumps).\n\n"
            $ ini_background += "init_function = None # provide a custom function name that is called after girl creation (between quotes)\n\n"

            $ ini_cloning = "## Cloning Options ##\n"
            if show_clone_options:
                menu:
                    "{b}Clone's freedom{/b} - Should clones keep your specified restrictions regarding their free/slave status?"
                    "Yes":
                        $ ini_cloning += "keep_generate_as = True # If False, clones will be generated both as slave and free girls regardless of the original setting. True will keep the 'generate_in' setting as well\n"
                    "No, allow for more variation":
                        $ ini_cloning += "keep_generate_as = False # If False, clones will be generated both as slave and free girls regardless of the original setting. True will keep the 'generate_in' setting as well\n"

                menu:
                    "{b}Clone's background story{/b} - Should clones keep the same background and origin?"
                    "Yes":
                        $ ini_cloning += "keep_background = True # If True, clones will keep the same origin and background story events\n"
                    "No, allow for more variation":
                        $ ini_cloning += "keep_background = False # If True, clones will keep the same origin and background story events\n"
            else:
                $ ini_cloning += "keep_generate_as = True # If False, clones will be generated both as slave and free girls regardless of the original setting. True will keep the 'generate_in' setting as well\n"
                $ ini_cloning += "keep_background = True # If True, clones will keep the same origin and background story events\n"
                
                $ ini_cloning += "keep_interactions = True # # If True, clones will keep the same interactions options and custom city/night events\n"
                $ ini_cloning += "keep_init = True # If True, clones will keep the same init function\n\n\n"
                $ ini_cloning += "#### END OF FILE ####"
    
                    
            python:

                txtFile = open(config.gamedir + "/" + persistent.girl + "/_BK.ini", "w")

                txtFile.writelines(ini_header + ini_identity + ini_skills + ini_positive_traits + ini_negative_traits + ini_personality + ini_custom_personality + ini_tastes + ini_sexual_preferences + ini_background + ini_cloning)

                txtFile.close()

        "Return to menu":
            return

    return # </neronero & RudolfU - BK.ini>



# ----------------------------- SCREENS -----------------------------



screen ini_positive_traits_list(): 
    
    frame xalign 0.5 xmaximum 0.9 xpadding 20 ypadding 50 yalign 0.5 background "#002244":
        
        has vbox spacing 20 xmaximum 0.9
        
        $ text_positive = "{b}Gold Traits{/b}\n"
        $ gold_traits_list = ["Naughty", "Fascinating", "Lust", "Warrior", "Skilled tongue", "Always wet", "Tight ass", "Playful", "Wild", "Dirty mind", "Magnetic", "Loose", "Dedicated", "Provocative", "Fashionista", "Perfectionist", "Elite", "Gifted", "Fast learner", "Caster", "Driven", "Country girl", "Noble", "Naturist", "Vicious"]
        
        $ positive_traits_list = ["Cute", "Long legs", "Nice boobs", "Juicy ass", "Sweet", "Exotic", "Polite", "Feminine", "Horny", "Resilient",  "Delicate", "Meek", "Pretty eyes", "Firm tits", "Seductive", "Graceful", "Beautiful", "Fit", "Charming", "Elegant", "Slutty", "Athletic", "Sensitive", "Obedient", "Energetic", "Tough", "Sexy", "Humble", "Virgin", "Sharp", "Loyal", "Brave", "Strong", "Lucky", "Deft", "Nimble", "Soft skin", "Bright", "Agile", "Brisk", "Rowdy", "Powerful", "Unhurried", "Modest", "Sensual", "Kinky", "Pervert", "Thief"]
        
        python:
            for trait in gold_traits_list:
                text_positive += "\"" + trait + "\", " 
                
            text_positive += "\n\n{b}Positive Traits{/b}\n"
                
            for trait in positive_traits_list:
                text_positive += "\"" + trait + "\", " 
        
        text text_positive size 18 color "#ffffff"
        
screen ini_negative_traits_list():
    
    frame xalign 0.5 xmaximum 0.9 xpadding 20 ypadding 50 yalign 0.5 background "#002244":
        
        has vbox spacing 20 xmaximum 0.9
        
        $ text_negative = "{b}Negative Traits{/b}\n"
        $ negative_traits_list = ["Plain", "Scars", "Mean", "Rude", "Cold", "Weak", "Rough", "Defiant", "Scruffy", "Plump", "Timid", "Vulgar", "Tame", "Frail", "Jaded", "Rebellious", "Lazy", "Sickly", "Homely", "Expensive", "Slow", "Distrustful", "Fearful", "Vulnerable", "Unlucky", "All thumbs", "Awkward", "Brutal", "Dumb", "Oafish", "Clumsy", "Prude", "Naive", "Square"]
        
        python:
            for trait in negative_traits_list:
                text_negative += "\"" + trait + "\", " 
       
        text text_negative size 18 color "#ffffff" 
        
screen ini_personality_list():
    
    frame xalign 0.5 xmaximum 0.9 xpadding 20 ypadding 50 yalign 0.5 background "#002244":
        
        has vbox spacing 20 xmaximum 0.9
        
        $ text_personality = "{b}Personalities{/b}\n"
        $ personalities_list = ["{b}\"Pervert\"{/b} - Wild and 'no limit' kind of girl. Curious about all sorts of sexual acts, the more perverted the better. Doesn't care for romance.", 
        "{b}\"Rebel\"{/b} - Always fighting and contradicting others, fiercely independent. Must do things of her own free will.", 
        "{b}\"Cold\"{/b} - Cold and detached, she doesn't show her feelings easily. She seems strangely unconcerned about what goes on around her, and uninterested in the fate of others.", 
        "{b}\"Nerd\"{/b} - Quiet and bookish. Rather light-headed. Curious. Doesn't like physical effort.", 
        "{b}\"Masochist\"{/b} - The lower the better. She likes to be at the bottom and secretly enjoys being mistreated. Gifts and loving gestures annoy her, she doesn't deserve them.", 
        "{b}\"Bimbo\"{/b} - Vain, attention-craved, cares about status and wealth. Loves presents and compliments. She has no qualms about using her body to get those things, too.",
        "{b}\"Meek\"{/b} - Shy, easily swayed, will cry rather than resist. Doesn't like conflict.",
        "{b}\"Sweet\"{/b} - Lovely and sunny personality. Always positive. Rather romantic. Doesn't like negativity.",
        "{b}\"Superficial\"{/b} - Ever the socialite, cares about being seen, preferably in the most outstanding outfit and expensive jewelry. Some call her needy and craving for attention, but she knows they're just jealous of her new shoes...",
        "{b}\"Holy\"{/b} - A firebrand promoter of religion and morality, she prays every night for the salute of her soul and tries to convert others to her beliefs. With little success so far, but she won't give up.",
        "{b}\"Helper\"{/b} - Always ready to help her friends, places herself after others. Can be a bit nosy sometimes.",
        "{b}\"Creep\"{/b} - Shy and awkward around people, she is obsessed about all sorts of dirty topics that she researches in her own time. Get complaints for stalking, a lot.",
        "{b}\"Repressed\"{/b} - Raised in a very strict environment, she lives in fear of her own impulses and tries her hardest to suppress them.",
        "{b}\"Schemer\"{/b} - Likes nothing more than to scheme and make grand plans, ready to assert her dominance over all living beings... Some day. In the meantime, if she has to suck a dick... So be it.",
        "{b}\"Prude\"{/b} - Affects to be a good, Arios-fearing girl at all times. Frowns on frivolity and amoral behavior. Some think she has dirty thoughts in secret, but if so, she hides them well.",
        "{b}\"Princess\"{/b} - A figurative princess (or is she?), she thinks everyone ought to be at her service and deliver on her every whim. Can be cruel, but mostly she is naive.",
        "{b}\"Pet\"{/b} - The teacher's pet. Always ready to please her master, likes nothing more than to live in comfort at his feet. Some despise her lack of independence, calling her unpleasant names behind her back.",
        "{b}\"Easy\"{/b} - It's not her fault, she has always attracted men, and never had the heart to turn them down. Although many call her easy, her sole purpose is to spread joy. Hopefully not STDs.",
        "{b}\"Class president\"{/b} - Must always be on top, strives to be exemplary and despises every kind of misconduct. The high expectations she has of others mirror the harsh discipline she puts herself through.",
        "{b}\"Tsundere\"{/b} - Easy to anger, hard to please, she has a secret soft spot. Will put herself at risk to help others, then kick their butts for needing help in the first place.",
        "{b}\"Loyal\"{/b} - Always follows orders, out of a sense of duty more than fear. Thinks everyone must know their place, and do their best at whatever job they hold. Even whores.",
        "{b}\"Yandere\"{/b} - Very high on the hot and neurotic scale. Loving and devoted, but also firebatshit crazy. Ready to do anything to get her man and snuff out the competition, including... actually snuffing them out.",
        "{b}\"Stubborn\"{/b} - Doesn't like people who don't share her principles and moral values, and doesn't like contradiction either. She's a lot of fun at parties, if you like parties that end with a tavern brawl."]
        
        python:
            for personality in personalities_list:
                text_personality += personality + "\n" 
       
        text text_personality size 16 color "#ffffff" 
        
screen ini_fixations_list():
    
    frame xalign 0.5 xmaximum 0.9 xpadding 20 ypadding 50 yalign 0.5 background "#002244":
        
        has vbox spacing 20 xmaximum 0.9
        
        $ text_fixations = "{b}Fixations{/b}\n"
        $ fixations_list = ["stripping",  "public acts", "cosplay", "dildos", "vibrators", "dirty sex", "penis worship", "bondage", "oil", "wet", "submission", "femdom", "gags", "strap-ons", "roleplay", "plugs", "enemas", "beads",  "masturbation", "fingering", "handjobs", "cunnilingus", "oral", "irrumatio", "deep throat", "titjobs", "footjobs", "double penetration", "fisting", "insults", "69",  "watersports", "ass-to-mouth", "kissing", "spanking", "rimming", "fondling her boobs", "groping her ass", "lactation", "doggy style", "cowgirl", "piledriver", "spooning", "bukkake", "cum in mouth", "cum on face", "cum in hair", "cum on body", "cum shower", "swallowing", "creampie", "cum inside", "multiple orgasms", "denied orgasm", "squirting"]
        
        python:
            for fixation in fixations_list:
                text_fixations += "\"" + fixation + "\", " 
       
        text text_fixations size 18 color "#ffffff" 

screen ini_story_list():
    
    frame xalign 0.5 xmaximum 0.9 xpadding 20 ypadding 50 yalign 0.1 background "#002244":
        
        has vbox spacing 20 xmaximum 0.9
        
        $ text_story = "{b}Stories{/b}\n"
        $ stories_list = ["{b}\"slave_story1\"{/b} - A story of love and betrayal", 
        "{b}\"slave_story2\"{/b} - A story of debt and suffering", 
        "{b}\"slave_story3\"{/b} - A story of life and death", 
        "{b}\"slave_story4\"{/b} - A story of greed and poverty", 
        "{b}\"slave_story5\"{/b} - A story of crime and punishment", 
        "{b}\"slave_story6\"{/b} - A story of glory and consequence",
        "{b}\"slave_story7\"{/b} - A story of devotion and sacrifice",
        "{b}\"slave_story8\"{/b} - A story of magic and curses"]
        
        python:
            for story in stories_list:
                text_story += story + "\n" 
       
        text text_story size 16 color "#ffffff"         

# Make sure you check RenPy documentation.
# Especially Screen Language and Screen Actions
screen positive_choice():
    default values = set()
    style_prefix "choice"
    $ gold_traits_list = ["Naughty", "Fascinating", "Lust", "Warrior", "Skilled tongue", "Always wet", "Tight ass", "Playful", "Wild", "Dirty mind", "Magnetic", "Loose", "Dedicated", "Provocative", "Fashionista", "Perfectionist", "Elite", "Gifted", "Fast learner", "Caster", "Driven", "Country girl", "Noble", "Naturist", "Vicious", "Conduct"]
    $ positive_traits_list = ["Cute", "Long legs", "Nice boobs", "Juicy ass", "Sweet", "Exotic", "Polite", "Feminine", "Horny", "Resilient",  "Delicate", "Meek", "Pretty eyes", "Firm tits", "Seductive", "Graceful", "Beautiful", "Fit", "Charming", "Elegant", "Slutty", "Athletic", "Sensitive", "Obedient", "Energetic", "Tough", "Sexy", "Humble", "Virgin", "Sharp", "Loyal", "Brave", "Strong", "Lucky", "Deft", "Nimble", "Soft skin", "Bright", "Agile", "Brisk", "Rowdy", "Powerful", "Unhurried", "Modest", "Sensual", "Kinky", "Pervert", "Thief", "Sane", "Trusting", "Loving"]
        
    text "{color=#FFD700}{b}Gold Traits{/b}{/color}" size 18
    for index, name in enumerate(gold_traits_list):    
        hbox xpos (index%6)*0.1 ypos 50+index//6*40:
            textbutton name action ToggleSetMembership(values, name) 
    text "{color=#009874}{b}Positive Traits{/b}{/color}" size 18 ypos 300
    for index, name in enumerate(positive_traits_list):    
        hbox xpos (index%6)*0.1 ypos 350+index//6*40:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values) 

screen negative_choice():
    default values = set()
    style_prefix "choice"
    $ negative_traits_list = ["Plain", "Scars", "Mean", "Rude", "Cold", "Weak", "Rough", "Defiant", "Scruffy", "Plump", "Timid", "Vulgar", "Tame", "Frail", "Jaded", "Rebellious", "Lazy", "Sickly", "Homely", "Expensive", "Slow", "Distrustful", "Fearful", "Vulnerable", "Unlucky", "All thumbs", "Awkward", "Brutal", "Dumb", "Oafish", "Clumsy", "Prude", "Naive", "Square", "Insane", "Distrustful", "Spiteful"]
     
    text "{color=#F78181}{b}Negative Traits{/b}{/color}" size 18
    for index, name in enumerate(negative_traits_list):    
        hbox xpos (index%6)*0.1 ypos 50+index//6*40:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values) 
      
screen personality_choice():
    default values = set()
    style_prefix "choice"      
    $ personalities_list = ["Pervert", "Rebel", "Cold", "Nerd", "Masochist", "Meek", "Sweet", "Superficial", "Bimbo", "Holy", "Helper", "Creep", "Repressed", "Schemer", "Prude", "Princess", "Pet", "Easy", "Class president", "Tsundere", "Loyal", "Yandere", "Stubborn"]
    
    for index, name in enumerate(personalities_list):    
        hbox xpos 0 ypos 50+index*35:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values)
        
screen act_choice():
    default values = set()
    style_prefix "choice"    
    $ acts_list = ["Naked", "Service", "Sex", "Anal", "Fetish", "Bisexual", "Group"]    
    
    for index, name in enumerate(acts_list):    
        hbox xpos 0 ypos 50+index*40:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values)
        
screen fixation_choice():
    default values = set()
    style_prefix "choice"    
    $ fixations_list = ["stripping",  "public acts", "cosplay", "dildos", "vibrators", "dirty sex", "penis worship", "bondage", "oil", "wet", "submission", "femdom", "gags", "strap-ons", "roleplay", "plugs", "enemas", "beads",  "masturbation", "fingering", "handjobs", "cunnilingus", "oral", "irrumatio", "deep throat", "titjobs", "footjobs", "double penetration", "fisting", "insults", "69",  "watersports", "ass-to-mouth", "kissing", "spanking", "rimming", "fondling her boobs", "groping her ass", "lactation", "doggy style", "cowgirl", "piledriver", "spooning", "bukkake", "cum in mouth", "cum on face", "cum in hair", "cum on body", "cum shower", "swallowing", "creampie", "cum inside", "multiple orgasms", "denied orgasm", "squirting"]
       
    for index, name in enumerate(fixations_list):    
        hbox xpos (index%6)*0.15 ypos 50+index//6*40:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values) 

screen story_choice():
    default values = set()
    style_prefix "choice"    
    $ story_list = ["slave_story1",  "slave_story2", "slave_story3", "slave_story4", "slave_story5",  "slave_story6", "slave_story7", "slave_story8"]
       
    for index, name in enumerate(story_list):    
        hbox xpos 0 ypos 50+index*35:
            textbutton name action ToggleSetMembership(values, name) 
    vbox xpos 0 yalign 0.9:
        textbutton "Done" action Return(values)
    
# </neronero & RudolfU - BK.ini generator>